class Node:
  def __init__(self, data=None, next_node=None):
    self.data=data
    self.next_node=next_node
  def get_data(self):
    return self.data
  def get_next(self):
    return self.next_node
  def set_next(self, new_next):
    self.next_node=new_next
class LinkedList:
  def __init__(self,head=None):
    self.head=head
  def get_head(self):
    return self.head
  def set_head(self,h):
    self.head=h
  def printHead(self):
    print(self.head.data)
  def insert(self,datum):
    newNode=Node()
    newNode.data=datum
    newNode.set_next(self.head)
    self.head=newNode
  def printall(self):
    current=self.head
    while current!=None:
      print(current.get_data())
      current=current.get_next()
  def deleteNode(self,data1):
    if self.head==None:
      print("No node found")
    elif self.head.get_data()==data1:
      print("head node found")
      self.head=self.head.get_next()
    else:
      current=self.head
      while current.get_next()!=None:
        if current.get_next().get_data()==data1:
          #print(current.get_data())
          deleted=current.get_next()
          #print(deleted.get_data())
          current.set_next(deleted.get_next())
        if current.get_next():  current=current.get_next()
      print("No node found")
  def findsum(self,head1,head2,carry):
    if head1==None and head2==None and carry==0:
      return None
      
    new_node=Node()
    sum=carry
    if head1!=None:
      sum+=head1.get_data()
    if head2!=None:
      sum+=head2.get_data()
    
    new_node.data=sum%10
    carry=1 if sum>10 else 0
    print(sum,carry)

    if head1!=None and head2!=None:
      temp=self.findsum(None if head1.get_next()==None else head1.get_next(), 
                      None if head2.get_next()==None else head2.get_next(),carry)
      new_node.set_next(temp)
    return new_node
n= Node()
ll1=LinkedList()
ll1.insert(5)
ll1.insert(6)
ll1.insert(4)
ll2=LinkedList()
ll2.insert(7)
ll2.insert(2)
ll2.insert(3)
#ll1.printall()
#ll2.printall()
ll3=LinkedList()
carry=0
headll3=ll3.findsum(ll1.get_head(),ll2.get_head(),carry)
ll3.set_head(headll3)
ll3.printall()
#ll.printHead()
